-------------BURNING TREE---------------


/*
class Node {
  public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    int res = 0;
    
    
    int burnTree(Node* root, int time) {
        if (!root) return 0;
        res = max(res, time);
        burnTree(root->left, time + 1);
        burnTree(root->right, time + 1);
        return res;
    }

  
    int dfs(Node* root, int target) {
        if (!root) return -1;

        if (root->data == target) {
            burnTree(root, 0);
            return 1;  
        }

        
        int left = dfs(root->left, target);
        if (left != -1) {
            burnTree(root->right, left + 1); 
            res = max(res, left);  
            return left + 1;
        }

        
        int right = dfs(root->right, target);
        if (right != -1) {
            burnTree(root->left, right + 1);  
            res = max(res, right);  
            return right + 1;
        }

        return -1;
    }

    int minTime(Node* root, int target) {
        res = 0;
        dfs(root, target);
        return res;
    }
};
